/* FillShader.cpp
Copyright (c) 2014 by Michael Zahniser

Endless Sky is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later version.

Endless Sky is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <https://www.gnu.org/licenses/>.
*/

#include "PostProcess.h"

#include "Color.h"
#include "DataNode.h"
#include "Point.h"
#include "Screen.h"
#include "Shader.h"
#include "FrameTimer.h"

#include <map>
#include <stdexcept>
#include <set>

using namespace std;

PostProcess::PostProcess(string name, map<PostProcess::dataType, uint64_t*> data)
{
	PostProcess::LoadPost(name);
}

void PostProcess::LoadPost(string name)
{
	shader = Shader(name);
	bufferImage = shader.Uniform("bufferTexture");

	// Generate the vertex data for drawing sprites.
	glGenVertexArrays(1, &vao);
	glBindVertexArray(vao);

	glGenBuffers(1, &vbo);
	glBindBuffer(GL_ARRAY_BUFFER, vbo);

	GLfloat vertexData[] = {
		-1.f, -1.f,
		 3.f, -1.f,
		-1.f,  3.f
	};
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertexData), vertexData, GL_STATIC_DRAW);

	glEnableVertexAttribArray(shader.Attrib("vert"));
	glVertexAttribPointer(shader.Attrib("vert"), 2, GL_FLOAT, GL_FALSE, 2 * sizeof(GLfloat), nullptr);

	// unbind the VBO and VAO
	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);
}



void PostProcess::ApplyPost(FrameBufferObject *fbo, float time)
{
	if(!shader.Object())
		throw std::runtime_error("PostProcess called before Init().");

	glUseProgram(shader.Object());
	glBindVertexArray(vao);

	glBindTexture(GL_TEXTURE_2D, fbo->BufferTexture());

	glDrawArrays(GL_TRIANGLE_STRIP, 0, 3);

	glBindVertexArray(0);
	glUseProgram(0);
}



//void PostProcess::SetUniforms(PostProcess::dataType uniform, const DataNode &node)
//{
//	switch (PostProcess::dataType)
//	{
//	case dataType::typeFloat:
//		input1 = shader.Uniform(node.Token(1));
//		if
//	}
//}
